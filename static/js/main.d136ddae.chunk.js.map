{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","arrange","bind","assertThisInitialized","removeElement","state","show","hasData","done","visible","onDismiss","setState","x","_this2","data","toConsumableArray","words","d","console","log","length","sort","row","Math","ceil","emptyColCt","filledColCt","push","splice","out","i","c1","c2","c3","c4","result","txt","e","_this3","concat","master","filter","_this4","react_default","a","createElement","className","Form","onSubmit","preventDefault","FormGroup","style","textAlign","paddingTop","fontSize","Label","Input","type","name","value","onChange","target","split","Button","marginTop","sz","onClick","marginLeft","Alert","color","isOpen","toggle","Table","bordered","width","map","idx","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iVAiPeA,cA3Ob,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,QAAUP,EAAKO,QAAQC,KAAbP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACfA,EAAKU,cAAgBV,EAAKU,cAAcF,KAAnBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACrBA,EAAKW,MAAQ,CAAEC,KAAM,EAAGC,QAAS,EAAGC,KAAM,GAC1Cd,EAAKW,MAAQ,CACXI,SAAS,GAGXf,EAAKgB,UAAYhB,EAAKgB,UAAUR,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KATAA,2EAajBG,KAAKc,SAAS,CAAEF,SAAS,oCAGnBG,GAAG,IAAAC,EAAAhB,KAoBLiB,EAAInB,OAAAoB,EAAA,EAAApB,CAAOiB,GACXI,EAAQ,GACRC,EAAI,GAKR,GADAC,QAAQC,IAAI,WACRL,EAAKM,OAAS,EAAG,CAEnBJ,GADAA,EAAQF,GACMO,OACdxB,KAAKc,SAAS,CAAEK,SAAS,cAezB,IATA,IAAMM,EAAMC,KAAKC,KAAKR,EAAMI,OAAS,GAGjCK,EAAmB,EAANH,EAAUN,EAAMI,OAC7BM,EAAc,EAAID,EAKfC,GACLA,GAAe,EACfT,EAAEU,KAAKX,EAAMY,OAAO,EAAGN,IAIzB,KAAOG,GACLA,GAAc,EAEdR,EAAEU,KAAKX,EAAMY,OAAO,EAAGN,EAAM,IAI/B,IADA,IAAIO,EAAM,GACDC,EAAI,EAAGA,EAAIR,EAAKQ,IACvBD,EAAIF,KAAK,CAAEI,GAAId,EAAE,GAAGa,GAAIE,GAAIf,EAAE,GAAGa,GAAIG,GAAIhB,EAAE,GAAGa,GAAII,GAAIjB,EAAE,GAAGa,KAG7DjC,KAAKc,SAAS,CAAEwB,OAAQN,EAAKvB,KAAM,GAAK,WACtCY,QAAQC,IAAI,cACZD,QAAQC,IAAIN,EAAKR,MAAM8B,eAIzBtC,KAAKc,SAAS,CAAEL,KAAM,EAAGE,KAAM,EAAGD,QAAS,EAAG6B,IAAK,GAAI3B,SAAS,0CAMtD4B,GAAG,IAAAC,EAAAzC,KACfqB,QAAQC,IAAR,kBAAAoB,OAA8BF,IAC9B,IAAIG,EAAS3C,KAAKQ,MAAMmC,OACxBA,EAASA,EAAOC,OAAO,SAAA7B,GAAC,OAAIA,IAAMyB,IAClCnB,QAAQC,IAAIqB,GACZ3C,KAAKc,SAAS,CAAE6B,OAAQA,EAAQ1B,KAAM0B,GAAU,WAC9CtB,QAAQC,IAAR,iBAAAoB,OAA6BD,EAAKjC,MAAMmC,SACxCF,EAAKrC,QAAQqC,EAAKjC,MAAMmC,2CAInB,IAAAE,EAAA7C,KACP,OACE8C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,mEAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,SAAU,SAAAX,GACRA,EAAEY,iBACFP,EAAKzC,QAAQyC,EAAKrC,MAAMS,QAG1B6B,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUK,MAAO,CAACC,UAAU,OAAQC,WAAW,OAAOC,SAAS,SAC5EX,EAAAC,EAAAC,cAAA,qBADF,sQAQAF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOT,UAAU,QACfH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,8EAIAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,2CAGJF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,WACLC,MAAO9D,KAAKQ,MAAM+B,IAElBwB,SAAU,SAAAvB,GAAK,IAEPsB,EAAUtB,EAAEwB,OAAZF,MAGNjB,EAAK/B,SAAS,CACZG,KAAM6C,EAAMG,MAAM,KAClBtB,OAAQmB,EAAMG,MAAM,KACpBvD,QAAS,EACTC,KAAM,EACN4B,IAAKuB,OAMV9D,KAAKQ,MAAME,QACVoC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEZ,MAAO,CAAEa,UAAW,QACpBC,GAAG,KAEHC,QAAS,SAAA7B,GAAC,OAAIK,EAAKzC,QAAQyC,EAAKrC,MAAMS,QAJxC,WAQA6B,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEZ,MAAO,CAAEa,UAAW,OAAQG,WAAY,QACxCF,GAAG,KAEHC,QAAS,SAAA7B,GAAC,OACRK,EAAK/B,SAAS,CAAEJ,QAAS,EAAG6B,IAAK,GAAI9B,KAAM,MAL/C,UAWA,OAKPT,KAAKQ,MAAMG,KACVmC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEC,MAAM,SACNC,OAAQzE,KAAKQ,MAAMI,QACnB8D,OAAQ1E,KAAKa,WAHf,0BAK0B,KAExB,KACJiC,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAOC,UAAQ,EAACtB,MAAO,CAAEuB,MAAO,OAAS5B,UAAU,aACjDH,EAAAC,EAAAC,cAAA,aACGhD,KAAKQ,MAAMC,KACRT,KAAKQ,MAAM8B,OAAOwC,IAAI,SAACtC,EAAGuC,GAAJ,OACpBjC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MACXT,EAAEN,GACDY,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQG,QAAS,SAAAtD,GAAC,OAAI8B,EAAKtC,cAAciC,EAAEN,MACxCM,EAAEN,IAEH,MAENY,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MACXT,EAAEL,GACDW,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQG,QAAS,SAAAtD,GAAC,OAAI8B,EAAKtC,cAAciC,EAAEL,MACxCK,EAAEL,IAEH,MAENW,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MACXT,EAAEJ,GACDU,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQG,QAAS,SAAAtD,GAAC,OAAI8B,EAAKtC,cAAciC,EAAEJ,MACxCI,EAAEJ,IAEH,MAENU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MACXT,EAAEH,GACDS,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQG,QAAS,SAAAtD,GAAC,OAAI8B,EAAKtC,cAAciC,EAAEH,MACxCG,EAAEH,IAEH,SAIV,gBAnOA2C,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d136ddae.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport { Table, Alert } from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.arrange = this.arrange.bind(this);\n    this.removeElement = this.removeElement.bind(this);\n    this.state = { show: 0, hasData: 0, done: 0 };\n    this.state = {\n      visible: true\n    };\n\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  onDismiss() {\n    this.setState({ visible: false });\n  }\n\n  arrange(x) {\n    /*\n    Problem:\n    Create an application that accepts words from a user and sorts the words alphabetically into four columns, vertically, then horizontally. \n    The last row should be the only row that contains any empty cells if the number of words are not evenly divisible by 4. \n    */\n\n    /*\n    Solution:\n    1. based on the length of the words array entered by the user, compute the max number of rows for building a nX4 matrix\n    2. Once the rows count is determined, compute the total elements in the matrix, \n    3. Identify the partially filled column counts by subtracting the length of words array from the length of the max elements possisble in the Nx4 matrix\n    4. Once the number of partially filled columns are determined, compute the fully filled columns by subtracting the partial column count from 4 (4 is fixed columns count for this problem)\n    5. Now, slice the words array to fill the fully filled columns, push to a new array\n    6. Then, slice the left overs to fill the partially filled columns, Since the last row is the only one to have missing values/ blanks, reduce the row count by -1 , push to a new array\n    7. Transpose the new array and generate a JSON\n    8. Render the JSON as a table of buttons\n    9. Add a remove element event to the buttons, and as they are removed, refresh the master and arrange again.\n    10. When we have removed all the element, set appropriate flags to render alerts\n    */\n    var data = [...x];\n    var words = [];\n    var d = [];\n    // console.log(\"Inside Arrange\");\n    // console.log(`master - ${this.state.master}`);\n\n    console.log(\"Sorting\");\n    if (data.length > 0) {\n      words = data;\n      words = words.sort();\n      this.setState({ words }, () => {\n        // console.log(\"words set\");\n      });\n\n      // see if it is a multiple of 4\n      // get the rows count\n      const row = Math.ceil(words.length / 4);\n      // log(`Max Row count is ${row}`);\n      // log(`Matrix size is ${row * 4}`);\n      var emptyColCt = row * 4 - words.length;\n      var filledColCt = 4 - emptyColCt;\n\n      // log(`emptyColCt = ${emptyColCt}`);\n      // log(`filled Col Ct = ${filledColCt}`);\n\n      while (filledColCt) {\n        filledColCt -= 1;\n        d.push(words.splice(0, row));\n        // log(d)\n      }\n\n      while (emptyColCt) {\n        emptyColCt -= 1;\n        //decrement row here, because we are working on partial columns\n        d.push(words.splice(0, row - 1));\n        // log(d)\n      }\n      var out = [];\n      for (var i = 0; i < row; i++) {\n        out.push({ c1: d[0][i], c2: d[1][i], c3: d[2][i], c4: d[3][i] });\n      }\n      //moved outside the loop\n      this.setState({ result: out, show: 1 }, () => {\n        console.log(\"JSON Ready\");\n        console.log(this.state.result);\n      });\n    } else {\n      // when empty set done to on\n      this.setState({ show: 0, done: 1, hasData: 0, txt: \"\", visible: true });\n\n      //reset the text\n    }\n  }\n\n  removeElement(e) {\n    console.log(`Remove Element ${e}`);\n    var master = this.state.master;\n    master = master.filter(x => x !== e);\n    console.log(master);\n    this.setState({ master: master, data: master }, () => {\n      console.log(`master is now ${this.state.master}`);\n      this.arrange(this.state.master);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Sort and Arrange words in an N X 4 matrix - Ramkumar Paranjothy\n        </header>\n        <div className=\"container\">\n          <Form\n            onSubmit={e => {\n              e.preventDefault();\n              this.arrange(this.state.data);\n            }}\n          >\n            <FormGroup>\n              <div className=\"problem\" style={{textAlign:\"left\", paddingTop:\"10px\",fontSize:'15px'}}>\n                <b>Problem:</b> Create an application that accepts words from a\n                user and sorts the words alphabetically into four columns,\n                vertically, then horizontally. The last row should be the only\n                row that contains any empty cells if the number of words are not\n                evenly divisible by 4.\n              </div>\n\n              <Label className=\"info\">\n                <b>Instructions</b>\n                <ul>\n                  <li>\n                    Enter your words below to be sorted and arranged in a nX4\n                    matrix\n                  </li>\n                  <li> Click \"Arrange\" / Enter to arrange </li>\n                  <li>Click a word to remove it</li>\n                  <li>Click \"Reset\" to start over</li>\n                </ul>\n              </Label>\n              <Input\n                type=\"text\"\n                name=\"elements\"\n                value={this.state.txt}\n                // while entering data, set done to false, hasData to true\n                onChange={e => {\n                  //validate for text\n                  var { value } = e.target;\n                  //split only when we have valid text\n                  // if (value) {\n                  this.setState({\n                    data: value.split(\" \"),\n                    master: value.split(\" \"),\n                    hasData: 1,\n                    done: 0,\n                    txt: value\n                  });\n                  // }\n                }}\n              />\n\n              {this.state.hasData ? (\n                <div>\n                  <Button\n                    style={{ marginTop: \"10px\" }}\n                    sz=\"md\"\n                    // block\n                    onClick={e => this.arrange(this.state.data)}\n                  >\n                    Arrange\n                  </Button>\n                  <Button\n                    style={{ marginTop: \"10px\", marginLeft: \"10px\" }}\n                    sz=\"md\"\n                    // block\n                    onClick={e =>\n                      this.setState({ hasData: 0, txt: \"\", show: 0 })\n                    }\n                  >\n                    Reset\n                  </Button>\n                </div>\n              ) : null}\n            </FormGroup>\n          </Form>\n\n          {/* render only when we are out of elements in the array */}\n          {this.state.done ? (\n            <Alert\n              color=\"danger\"\n              isOpen={this.state.visible}\n              toggle={this.onDismiss}\n            >\n              All elements removed !!{\" \"}\n            </Alert>\n          ) : null}\n          <Table bordered style={{ width: \"70%\" }} className=\"container\">\n            <tbody>\n              {this.state.show\n                ? this.state.result.map((e, idx) => (\n                    <tr>\n                      <td className=\"td\">\n                        {e.c1 ? (\n                          <Button onClick={x => this.removeElement(e.c1)}>\n                            {e.c1}\n                          </Button>\n                        ) : null}\n                      </td>\n                      <td className=\"td\">\n                        {e.c2 ? (\n                          <Button onClick={x => this.removeElement(e.c2)}>\n                            {e.c2}\n                          </Button>\n                        ) : null}\n                      </td>\n                      <td className=\"td\">\n                        {e.c3 ? (\n                          <Button onClick={x => this.removeElement(e.c3)}>\n                            {e.c3}\n                          </Button>\n                        ) : null}\n                      </td>\n                      <td className=\"td\">\n                        {e.c4 ? (\n                          <Button onClick={x => this.removeElement(e.c4)}>\n                            {e.c4}\n                          </Button>\n                        ) : null}\n                      </td>\n                    </tr>\n                  ))\n                : null}\n            </tbody>\n          </Table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}